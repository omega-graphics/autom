import("//gn-utils/Utils.gni")

declare_args(){
    built_package_out_dir = "$root_out_dir/gnpkg"
}

if(is_linux){
    static_lib_suffix = "a"
    shared_lib_suffix = "so"
    lib_prefix = "lib"
}
else if(is_mac){
    static_lib_suffix = "a"
    shared_lib_suffix = "dylib"
    lib_prefix = "lib"
}
else {
    static_lib_suffix = "lib"
    shared_lib_suffix = "dll"
    lib_prefix = ""
}

template("external_lib_target"){
    assert(defined(invoker.public_headers))
    t_name = "${target_name}"
    copy("${target_name}_headers"){
        visibility = [":$t_name"]
        sources = invoker.public_headers
        # if(built == false){
            if(defined(invoker.public_header_output_dir)){
                outputs = [
                    invoker.public_header_output_dir
                ]
            }
            else {
                outputs = [
                    "${invoker.output_dir}/include/{{source_file_part}}"
                ]
            }
        # }
    }

    if(defined(invoker.public_deps)){
        invoker.public_deps += [":${target_name}_headers"]
    }
    else {
        invoker.public_deps = [":${target_name}_headers"]
    }

    if(defined(invoker.static)){
        if(invoker.static == true){
            static_library(target_name){
                forward_variables_from(invoker,["sources","deps","public_deps","configs","public_configs","include_dirs","output_dir","defines","ldflags","cflags_c","cflags_cc","output_name","visibility","frameworks","framework_dirs","libs"])
            }
        }
    }
    else if(defined(invoker.is_source_set)){
        if(invoker.is_source_set){
            source_set(target_name){
                forward_variables_from(invoker,["sources","deps","public_deps","configs","public_configs","include_dirs","output_dir","defines","ldflags","cflags_c","cflags_cc","output_name","visibility","frameworks","framework_dirs","libs"])
            }
        }
    }
    else {
        shared_library(target_name){
           forward_variables_from(invoker,["sources","deps","public_deps","configs","public_configs","include_dirs","output_dir","defines","ldflags","cflags_c","cflags_cc","output_name","visibility","frameworks","framework_dirs","libs"]) 
        }
    }

    if(!defined(invoker.export_config)){

        config("${target_name}_config"){
            include_dirs = ["${invoker.output_dir}/include"]
        }

    }
    else {
        if(invoker.export_config){

            config("${target_name}_config"){
                include_dirs = ["${invoker.output_dir}/include"]
            }
            
        }
    }
    
}

template("external_header_lib_target"){
    assert(defined(invoker.output_dir))
    copy(target_name){
        sources = invoker.sources
        forward_variables_from(invoker,["deps","public_deps"])
        # if(built == false){
            outputs = [
                "${invoker.output_dir}/{{source_file_part}}"
            ]
        # }
    }

    t_name = target_name

    config("${t_name}_config"){
        forward_variables_from(invoker,["include_dirs","public_configs","libs","defines"])
    }
}