declare_args(){
    debug = false
}

if(debug){
    debug_flag = "-gdwarf"
}
else {
    debug_flag = ""
}



if(!is_windows){

    fPIC = ""
    if(is_linux){
        fPIC = "-fPIC"
    }
    
    arch = ""
    xcprefix = ""
    if(is_ios){
        arch = "-arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk"
        xcprefix = ""
    }
}

if(is_windows){
    toolchain("msvc"){
        if(debug){
            debug_flag = "/Z7"
            link_debug_flag = "/DEBUG"
        }
        else {
            link_debug_flag = ""
        }
        cc = "cl"
        tool("cc"){
            depsformat = "msvc"
            command = "$cc /nologo {{defines}} {{include_dirs}} $debug_flag {{cflags_c}} /Fo{{output}}  /c {{source}} "
            description = "Compiling C source {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.obj"
            ]
        }
        tool("cxx"){
            depsformat = "msvc"
            command = "$cc /nologo {{defines}} {{include_dirs}} $debug_flag {{cflags_c}} {{cflags_cc}} /Fo{{output}} /std:c++17 /c {{source}}"
            description = "Compiling CXX source {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.obj"
            ]
        }
        tool("link"){
            outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
            outputs = [outfile]
            lib_switch = ""
            lib_dir_switch = "/LIBPATH "
            command = "link $link_debug_flag /nologo /OUT:$outfile {{ldflags}} {{inputs}} {{libs}}"
            default_output_extension = ".exe"
            description = "Linking executable $outfile"
        }
        tool("solink"){
            outputs = ["{{output_dir}}/{{target_output_name}}.lib","{{output_dir}}/{{target_output_name}}.dll"]
            imp_lib_out = "{{output_dir}}/{{target_output_name}}.lib"
            outfile = "{{output_dir}}/{{target_output_name}}.dll"
            command = "link $link_debug_flag /nologo /opt:noref /INCREMENTAL  /DLL /OUT:$outfile /IMPLIB:$imp_lib_out {{ldflags}} {{inputs}} {{libs}}"
            lib_switch = ""
            lib_dir_switch = "/LIBPATH "
            description = "Linking shared library $outfile"
        }
        tool("alink"){
            command = "lib {{arflags}}  /out:{{output}} {{inputs}}"
             outputs = [
            "{{output_dir}}/{{target_output_name}}{{output_extension}}"
            ]
            description = "Linking static archive {{target_output_name}}{{output_extension}}"
            default_output_extension = ".lib"
        }
        tool("copy"){  
            python_copy = rebase_path("../__copy.py")
            command = "$python_path $python_copy --src {{source}} --dest {{output}}"
            description = "Copying {{source}} to {{output}}"
        }
        tool("rc"){
            command = "rc.exe /nologo {{defines}} {{include_dirs}} /FO {{output}} {{source}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.res"
            ]
            depsformat = "msvc"
            description = "Compiling rc script {{output}}"
        }

        tool("stamp"){
            command = "cmd.exe /c echo > {{output}}"
            description = "Stamping {{output}}"
        }
    }
}

toolchain("gcc"){
    if(debug){
        debug_flag = "-gdwarf"
    }
    tool("cc"){
        depfile = "{{output}}.d"
        depsformat = "gcc"
        command = "gcc -MMD -MP -MF $depfile ${fPIC} {{defines}} {{include_dirs}} $debug_flag -fPIC {{cflags_c}} -o {{output}}  -c {{source}} "
        description = "Compiling C source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.o"
        ]
    }
    tool("cxx"){
        depfile = "{{output}}.d"
        depsformat = "gcc"
        command = "g++ -MMD -MP -MF $depfile ${fPIC}  {{defines}} {{include_dirs}} $debug_flag -fPIC {{cflags_c}} {{cflags_cc}} -std=c++17 -o {{output}} -c {{source}}"
        description = "Compiling CXX source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.o"
        ]
    }
    tool("link"){
        outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        outputs = [outfile]
        lib_switch = "-l"
        lib_dir_switch = "-L"
        command = "g++ ${fPIC} $debug_flag -pie -o $outfile {{ldflags}} {{libs}} {{inputs}}"
        default_output_extension = ""
        description = "Linking executable $outfile"
    }
    tool("solink"){
        outputs = ["{{output_dir}}/{{target_output_name}}.so"]
        outfile = "{{output_dir}}/{{target_output_name}}.so"
        command = "g++ $debug_flag -fPIC -dynamic  -o $outfile {{ldflags}} {{libs}} {{inputs}} "
        lib_switch = "-l"
        lib_dir_switch = "-L"
        description = "Linking shared library $outfile"
    }
    tool("alink"){
        command = "ar -r {{arflags}} {{output}} {{inputs}}"
            outputs = [
        "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        ]
        description = "Linking static archive {{target_output_name}}{{output_extension}}"
        default_output_extension = ".a"
    }
    tool("copy"){  
        python_copy = rebase_path("../__copy.py")
        command = "$python_path $python_copy --src {{source}} --dest {{output}}"
        description = "Copying {{source}} to {{output}}"
    }

    tool("stamp"){
        command = "touch {{output}}"
        description = "Stamping {{output}}"
    }
}


toolchain("llvm") {
    if(is_windows){
        cc = "clang-cl"
        except_flag_cl = "/EHa"
        win_cmd_prefix = "cmd.exe /c"
        obj_ext = "obj"
    }
    if(is_mac || is_linux || is_ios){
        # python_path = python3
        obj_ext = "o"
    }
    else {
        # lld_command = "lld-link"
    }

    if(is_mac || is_ios){
        cc = "clang"
        cxx = "clang++"
        # lld_command = "ld"
    }
    else if(is_linux){
        cc = "clang"
        cxx = "clang++"
    }

    tool("asm"){
        depfile = "{{output}}.d"
        if(is_linux){
            depsformat = "gcc"
            format = "elf64"
        }
        else if(is_mac){
            depsformat = "gcc"
            format = "macho64"
        }
        else {
            depsformat = "msvc"
            format = "win64"
        }
        command = "nasm {{include_dirs}} -f$format {{source}} -o {{output}} -MD$depfile {{defines}} {{asmflags}}"
        
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
        description = "Compiling ASM source {{output}}"
    }
    tool("cc") {
        depfile = "{{output}}.d"
        
        if(is_linux || is_mac || is_ios){
            depsformat = "gcc"
            command = "${xcprefix} $cc -MD -MF $depfile ${fPIC}  {{defines}} {{include_dirs}} $debug_flag ${arch} {{cflags_c}}  -c {{source}}  -o {{output}}"
        }
        else {
            depsformat = "msvc"
            command = "$cc ${except_flag_cl} /clang:-MD /clang:-MF /clang:$depfile  {{defines}} {{include_dirs}} $debug_flag {{cflags_c}}  -c {{source}}  -o {{output}}"
        }
        description = "Compiling C source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
    }
    tool("cxx"){
        depfile = "{{output}}.d"
       
        if(is_linux || is_mac || is_ios){
            command = "${xcprefix} $cxx -MD -MF $depfile -std=c++17 ${fPIC} {{defines}} {{include_dirs}} $debug_flag ${arch} {{cflags_c}} {{cflags_cc}} -c {{source}} -o {{output}}"
        }
        else {
            command = "clang-cl ${except_flag_cl} /clang:-MD /clang:-MF /clang:$depfile /std:c++17 {{defines}} {{include_dirs}} $debug_flag {{cflags_c}} {{cflags_cc}} -c {{source}} -o {{output}}"
        }
        if(is_linux || is_mac){
            depsformat = "gcc"
        }
        else {
            depsformat = "msvc"
        }
        description = "Compiling CXX source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
    }
    tool("cxx_module"){
        depfile = "{{output}}.d"
        
        if(is_linux || is_mac || is_ios){
            depsformat = "gcc"
            command = "${xcprefix} $cxx -MD -MF $depfile -std=c++17 {{defines}} {{include_dirs}} {{cflags_c}} ${arch} {{cflags_cc}} -fmodules -fmodule-name={{label}} -Xclang -Xclang -emit-module-interface -c {{source}} -o {{output}}"
        }
        else {
            depsformat = "msvc"
            command = "clang-cl ${except_flag_cl} /clang:-MD /clang:-MF /clang:$depfile /std:c++17 {{defines}} {{include_dirs}} {{cflags_c}} {{cflags_cc}} -c {{source}} -o {{output}} -fmodules -fmodule-name={{label}} -Xclang -Xclang -emit-module-interface -c {{source}} -o {{output}}"
        }
        description = "Compiling CXX source for module {{label}} {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.pcm"
        ]
    }
    if(is_mac || is_ios){
        tool("objc"){
            depfile = "{{output}}.d"
            depsformat = "gcc"
            description = "Compiling OBJC source {{output}}"
            command = "${xcprefix} $cc -MD -MF $depfile  {{defines}} {{include_dirs}} $debug_flag ${arch} {{cflags_c}} {{cflags_objc}}  -c {{source}}  -o {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
            ]
        }
        tool("objcxx"){
            depfile = "{{output}}.d"
            depsformat = "gcc"
            description = "Compiling OBJCXX source {{output}}"
            command = "${xcprefix} $cxx -MD -MF $depfile -std=c++17 {{defines}} {{include_dirs}} $debug_flag ${arch} {{cflags_c}} {{cflags_cc}} {{cflags_objc}} {{cflags_objcc}} -c {{source}} -o {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
            ]
        }
        tool("copy_bundle_data"){
            python_copy = rebase_path("../__copy.py")
            command = "$python_path \"$python_copy\" --src {{source}} --dest {{output}}"
            description = "Copying {{source}} to {{output}}"
        }
    }
    tool("swift"){
        depfile = "{{target_out_dir}}/{{module_name}}.d"
        depsformat = "gcc"

        _new_out = rebase_path("../../out/gen")

        description = "Compiling SWIFT source {{output}}"
        command = "xcrun -sdk macosx swiftc  {{defines}} $debug_flag {{swiftflags}} {{module_dirs}} -emit-dependencies -module-name {{module_name}} -o {{output}} {{include_dirs}} -emit-module -emit-object -enable-library-evolution -emit-module-interface-path $_new_out/{{module_name}}.swiftinterface  {{inputs}}"
        outputs = [
            "{{target_gen_dir}}/{{module_name}}.swiftmodule",
            "{{target_gen_dir}}/{{module_name}}.h",
            "{{target_gen_dir}}/{{module_name}}.swiftdoc",
            "{{target_gen_dir}}/{{module_name}}.swiftsourceinfo",
        ]
        partial_outputs = [
            "{{source_out_dir}}/{{source_name_part}}.o"
        ]
    }
    tool("alink") {
        if(is_windows){
            command = "llvm-lib /machine:x64 {{arflags}}  /out:{{output}} {{inputs}}"
        }
        else if(is_mac || is_linux || is_ios) {
            command = "ar -r {{output}} {{inputs}} {{arflags}}"
        }
        outputs = [
            "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        ]
        description = "Linking static archive {{target_output_name}}{{output_extension}}"
        if(is_mac || is_linux){
            default_output_extension = ".a"
            output_prefix = ""
        }
        else {
            lib_dir_switch = "/LIBPATH"
            lib_switch =  ""
            default_output_extension = ".lib"
            output_prefix = ""
        }
    }
    tool("solink") {
        outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        if(is_mac || is_ios){
            command = "$cxx -o $outfile -dynamiclib {{ldflags}} {{inputs}} {{solibs}} {{frameworks}} {{swiftmodules}} {{libs}}"  
        }
        else if(is_linux){
            command = "$cxx -fuse-ld=lld -o $outfile -Wl,-shared {{ldflags}} {{inputs}} {{solibs}} {{libs}}" 
        }
        # Link MSVC Runtime
        else if(is_windows) {
            lib_dir_switch = "/LIBPATH"
            lib_switch =  ""
            command = "clang-cl $debug_flag   -Wl  /LD /Fe$outfile {{inputs}}  /link {{ldflags}} {{solibs}} {{libs}}"
        }
        if(is_windows){
            outputs = ["{{output_dir}}/{{target_output_name}}.lib","{{output_dir}}/{{target_output_name}}.dll"]
        }
        else {
            outputs = [outfile]
        }
        description = "Linking shared library $outfile"
        # default_output_dir = "{{root_out_dir}}"
    }
    tool("link") {
        outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        if(is_mac || is_ios){
            command = "$cxx -o $outfile -Wl, {{ldflags}} {{inputs}} {{solibs}} {{libs}} {{frameworks}} " 
        }
        else if(is_linux){
            command = "$cxx -o $outfile -Wl, {{ldflags}} {{inputs}} {{solibs}} {{libs}} "
        }
        # Link MSVC Runtime
        else {
            default_output_extension = ".exe"
            lib_dir_switch = "/LIBPATH"
            lib_switch =  ""
            command = "clang-cl $debug_flag  /MT /Fe$outfile -Wl {{ldflags}} {{solibs}} {{inputs}} {{libs}}"
        }
        outputs = [outfile]
        description = "Linking executable $outfile"
        # default_output_dir = "{{root_out_dir}}"
    }
    tool("copy"){
        
        python_copy = rebase_path("../__copy.py")
        command = "$python_path $python_copy --src {{source}} --dest {{output}}"
        description = "Copying {{source}} to {{output}}"
    }
    tool("rc"){
        command = "rc.exe /nologo {{defines}} {{include_dirs}} /FO {{output}} {{source}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.res"
        ]
        depsformat = "msvc"
        description = "Compiling rc script {{output}}"
    }
    if(is_windows){
        stamp = "$win_cmd_prefix echo >"
    }
    else {
        stamp = "touch"
    }
    tool("stamp"){
        command = "$stamp {{output}}"
        description = "Stamping {{output}}"
    }

}