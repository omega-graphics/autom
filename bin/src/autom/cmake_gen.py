from .autom_types import *

class __CmakeGenerator__:
    """
    Private class for generating CMake
    """
    targets: "list[Target]"
    proj_info: Project
    def __init__(self,targets:"list[Target]",project:Project):
        self.targets = targets
        self.proj_info = project
    def format_source_files(self,srcs:"list[str]"):
        for i in range(0,len(srcs)):
            s = srcs[i]
            n = "\"{}\"".format(s)
            srcs[i] = n 
        return " ".join(srcs)
    def generate(self,out_file:str):
        out_dir = os.path.dirname(out_file)
        if os.path.exists(out_dir) == False: 
            os.makedirs(out_dir)
        stream  = io.open(out_file,"w")
        stream.write("# This File Was Generated by AUTOM Build Tool. Do NOT EDIT!!!\n")
        print(self.targets)
        stream.write(f"cmake_minimum_required(VERSION 3.13)")
        stream.write("\n")
        stream.write(f"project(\"{self.proj_info.name}\" VERSION \"{self.proj_info.version}\" LANGUAGES C CXX)")
        stream.write("\n\n")
        for t in self.targets:
            if t.__type__.value == TargetType.EXECUTABLE.value:
                stream.write(f"add_executable(\"{t.name}\" " + self.format_source_files(srcs=t.source_files) + ")\n")
                stream.write(f"set_target_properties(\"{t.name}\" PROPERTIES RUNTIME_OUTPUT_DIRECTORY " + "\"${CMAKE_BINARY_DIR}/" + f"{t.output_dir}\")\n")
                stream.write("\n")
            elif t.__type__.value == TargetType.LIBRARY.value:
                if t.shared:
                    stream.write(f"add_library(\"{t.name}\" SHARED {self.format_source_files(srcs=t.source_files)})\n")
                    stream.write(f"set_target_properties(\"{t.name}\" PROPERTIES RUNTIME_OUTPUT_DIRECTORY " + "\"${CMAKE_BINARY_DIR}/" + f"{t.output_dir}\")\n")
                else:
                    stream.write(f"add_library(\"{t.name}\" STATIC {self.format_source_files(srcs=t.source_files)})\n")
                stream.write(f"set_target_properties(\"{t.name}\" PROPERTIES ARCHIVE_OUTPUT_DIRECTORY " + "\"${CMAKE_BINARY_DIR}/" + f"{t.output_dir}\")\n")
                
        stream.close()